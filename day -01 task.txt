01 Write a blog on Difference between HTTP1.1 vs HTTP2
HTTP:
        ⦁ HTTP stands for hypertext transfer protocol & it is used in client-server communication .
    	⦁ By using HTTP user sends the request to the server & the server sends the response to the user. 
	⦁ There are several stages of development of HTTP but we will focus mainly on HTTP/1.1 which was created in 1997 & the new one is HTTP/2 which was created in 2015.
HTTP1.1: 
	⦁ HTTP/1.1 provided support for chunk transfers that allowed streaming of content dynamically as chunks and for additional headers to be sent after the message body.
	⦁ This enhancement was particularly useful in cases where values of a field remained unknown until the content had been produced.
	⦁ The drawbacks that lead to the creation of HTTP/2: The first problem is HTTP/1.1 transfer all the requests & responses in the plain text message form.
	⦁ The second one is head of line blocking in which TCP connection is blocked all other requests until the response does not receive.
HTTP2:
	⦁ HTTP/2 was developed over the SPDY protocol. HTTP/2 works on the binary framing layer instead of textual that converts all the messages in binary format. it works on fully multiplexed that is one TCP connection is used for multiple requests.
	⦁ HTTP/2 uses HPACK which is used to split data from header. it compresses the header
	⦁ The server sends all the other files like CSS & JS without the request of the client using the PUSH frame.
 
The Major Difference between HTTP1.1and HTTP2are  

   
     Key Features   -	⦁ It supports connection reuse i.e. for every TCP connection there could be multiple requests and responses, and pipelining where the client can request several resources from the server at once.
                        ⦁ Uses multiplexing, where over a single TCP connection resources to be delivered are interleaved and arrive at the client almost at the same time.
      
     Status Code    -	⦁ Introduces a warning header field to carry additional information status of a message. 
                        ⦁ Can define 24 status codes, error reporting is quicker and more efficient.	
                        ⦁ Underlying semantics of HTTP such as headers, status codes remains the same.
     

     Authentication                
       Mechanism    -   ⦁ It is relatively secure since it uses digest authentication, NTLM authentication.
                        ⦁ Security concerns from previous versions will continue to be seen in HTTP/2.
        
       Caching	    -   ⦁ Expands on the caching support by using additional headers like cache-control, conditional headers like If-Match and by using entity tags.	
                        ⦁ HTTP/2 does not change much in terms of caching. 
     
     Web Traffic    -	⦁ HTTP/1.1 provides faster delivery of web pages and reduces web traffic as compared to HTTP/1.0. 	
                        ⦁ Its utilizes multiplexing and server push to effectively reduce the page load time by  greater margin along with being sensitive to NWdelays.

02 Write a blog on Objects and its internal representation in Javascript

Objects and its internal representation in Javascript:

Object:

In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.
Creating Objects in JavaScript:

1.	By object literal
2.	By creating instance of Object directly (using new keyword)

By object literal:

The syntax of creating object using object literal is given below:
     object ={property 1:value1,property 2:value2.....property N:valueN}

property and value is separated by colon(:).

Example:
             var person={
             fname:"xxx",
             1name:"yyy",
             age=25
             };
 
By creating instance of Object directly (using new keyword):

The syntax of creating object directly is given below:
           var objectname= newObject();

Here, new keyword is used to create object.

Example:
        var emp=new Object();
        emp.id=101;
        emp.name="xxx";
        emp.salary=50000;

Accessing JavaScript Objects:

The syntax for accessing the property of an object is:
    objectName.property
               or
    objectName[“property”]

Accessing ‘fname’ from example 1 using dot operator,
             
                       person.fname

Accessing ‘name’ form example 2 using [],
      
                             emp["name"]
